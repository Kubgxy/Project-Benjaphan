import { Request, Response } from "express";
import Article from "../Models/Article";

// üü¢ ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ published)
export const getAllArticles = async (req: Request, res: Response) => {
  try {
    const { search, tag, category, page = 1, limit = 10, sortBy = "createdAt" } = req.query;

    const query: any = {}; // üü¢ ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ isPublished ‡πÅ‡∏•‡πâ‡∏ß

    if (search) {
      query.title = { $regex: search, $options: "i" }; // üîé ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ title (case-insensitive)
    }

    if (tag) {
      query.tags = tag; // üîñ filter ‡∏à‡∏≤‡∏Å tag
    }

    if (category) {
      query.category = category; // üóÇÔ∏è filter ‡∏à‡∏≤‡∏Å category
    }

    // üü° ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ sort
    let sortOptions: any = {};
    if (sortBy === "views") {
      sortOptions = { views: -1 }; // üî• ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° views ‡∏°‡∏≤‡∏Å ‚Üí ‡∏ô‡πâ‡∏≠‡∏¢
    } else {
      sortOptions = { createdAt: -1 }; // üïí default ‚Üí ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô
    }

    const articles = await Article.find(query)
      .populate("author", "firstName lastName")
      .sort(sortOptions)
      .skip((Number(page) - 1) * Number(limit))
      .limit(Number(limit));

    const total = await Article.countDocuments(query);

    res.status(200).json({
      total,
      page: Number(page),
      limit: Number(limit),
      sortBy,
      articles,
    });
  } catch (error) {
    console.error("‚ùå Error fetching articles:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
  }
};

// üü† ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢ slug
export const getArticleBySlug = async (req: Request, res: Response) => {
    try {
      const slug = req.params.slug;
  
      const article = await Article.findOne({ slug, isPublished: true })
        .populate("author", "firstName lastName");
  
      if (!article) {
        res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ" });
        return
      }
  
      // üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏° views +1 ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡∏≠‡πà‡∏≤‡∏ô
      article.views += 1;
      await article.save();
  
      res.status(200).json({ article });
    } catch (error) {
      console.error("‚ùå Error fetching article by slug:", error);
      res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
    }
  };
  

// üü¢ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
export const createArticle = async (req: Request, res: Response) => {
  try {
    const {
      title,
      excerpt,
      content,
      tags,
      category,
      metaDescription,
      isPublished,
    } = req.body;

    const authorId = req.user?.userId;

    const files = req.files as { [fieldname: string]: Express.Multer.File[] };

    // ‚úÖ ‡∏î‡∏∂‡∏á thumbnail (1 ‡∏£‡∏π‡∏õ)
    const thumbnail = files?.["thumbnail"]?.[0]?.path || "";
    
    if (!thumbnail) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏õ‡∏Å (thumbnail)" });
      return;
    }
    
    // ‚úÖ ‡∏î‡∏∂‡∏á contentImages (‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ ‚Üí array)
    const contentImages = (files?.["contentImages"] || []).map((file) => file.path);

    if (!files || !files["thumbnail"] || files["thumbnail"].length === 0) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏õ‡∏Å (thumbnail)" });
      return;
    }
    
    // ‚úÖ 3. ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö tags ‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string (‡πÄ‡∏ä‡πà‡∏ô '["tag1", "tag2"]')
    // ‚úÖ Parse tags ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏™‡∏°‡∏≠ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ô Dashboard ‡πÄ‡∏õ‡πá‡∏ô "‡πÅ‡∏´‡∏ß‡∏ô, ‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á, ‡∏°‡∏π‡πÄ‡∏ï‡∏•‡∏π")
    let parsedTags: string[] = [];

    if (typeof tags === "string") {
      try {
        // üü¢ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏°‡∏µ‡∏Ñ‡∏ô‡∏™‡πà‡∏á JSON string ["‡πÅ‡∏´‡∏ß‡∏ô", "‡πÄ‡∏™‡∏£‡∏¥‡∏°‡∏î‡∏ß‡∏á"]
        parsedTags = JSON.parse(tags);
      } catch {
        // üü¢ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ ‚Üí split ‡∏à‡∏≤‡∏Å comma (,) ‡πÅ‡∏•‡πâ‡∏ß trim ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏≠‡∏≠‡∏Å
        parsedTags = tags.split(",").map((tag: string) => tag.trim()).filter((tag) => tag !== "");
      }
    } else if (Array.isArray(tags)) {
      parsedTags = tags;
    }

    const newArticle = new Article({
      title,
      excerpt,
      content,
      thumbnail,             // üü¢ ‡πÉ‡∏ä‡πâ path ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏õ‡∏Å
      contentImages,         // üü¢ ‡πÉ‡∏ä‡πâ path array ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡πÉ‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
      tags: parsedTags,      // üü¢ tags ‡πÄ‡∏õ‡πá‡∏ô array ‡πÄ‡∏™‡∏°‡∏≠
      category,
      metaDescription,
      isPublished: isPublished === "true",
      author: authorId,
    });

    await newArticle.save();

    res.status(201).json({
      message: "üìñ ‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      article: newArticle,
    });
  } catch (error) {
    console.error("‚ùå Error creating article:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
  }
};

// üü† ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
export const updateArticle = async (req: Request, res: Response) => {
    try {
      const articleId = req.params.id;
  
      const {
        title,
        excerpt,
        content,
        image,
        tags,
        category,
        metaDescription,
        isPublished,
      } = req.body;
  
      const updatedArticle = await Article.findByIdAndUpdate(
        articleId,
        {
          title,
          excerpt,
          content,
          image,
          tags,
          category,
          metaDescription,
          isPublished,
        },
        { new: true, runValidators: true }
      );
  
      if (!updatedArticle) {
        res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ" });
        return
      }
  
      res.status(200).json({
        message: "üìù ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
        article: updatedArticle,
      });
    } catch (error) {
      console.error("‚ùå Error updating article:", error);
      res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
    }
  };

// üü† ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°
export const deleteArticle = async (req: Request, res: Response) => {
    try {
      const articleId = req.params.id;
  
      const deletedArticle = await Article.findByIdAndDelete(articleId);
  
      if (!deletedArticle) {
        res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡∏ö" });
        return
      }
  
      res.status(200).json({ message: "üóëÔ∏è ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
    } catch (error) {
      console.error("‚ùå Error deleting article:", error);
      res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏ó‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ", error });
    }
  };