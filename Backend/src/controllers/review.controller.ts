import { Request, Response, NextFunction } from "express";
import ProductRating from "../Models/ProductRating";

export const addRating = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    const { productId, rating } = req.body;
    const userId = req.user?.userId;
  
    if (!userId) {
      res.status(401).json({ message: "Please login before rating." });
      return;
    }
  
    try {
      // ‚úÖ Check ‡∏ß‡πà‡∏≤ user ‡∏ô‡∏µ‡πâ‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô product ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      const existingRating = await ProductRating.findOne({ productId, userId });
  
      if (existingRating) {
        res.status(400).json({ message: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß!" });
        return 
      }
  
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ ‚Üí ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      await ProductRating.create({ productId, userId, rating });
      res.status(200).json({ message: "Rating saved successfully." });
    } catch (error) {
      res.status(500).json({ message: "Error saving rating.", error });
    }
  };

// controller/review.controller.ts
export const getUserRating = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      const userId = req.user?.userId;
      const { productId } = req.params;
  
      if (!userId) {
        res.status(401).json({ message: "Unauthorized" });
        return;
      }
  
      const rating = await ProductRating.findOne({ productId, userId });
      if (!rating) {
        res.status(200).json({ rating: 0 });
        return;
      }
  
      res.status(200).json({ rating: rating.rating });
    } catch (error) {
      res.status(500).json({ message: "Server error", error });
    }
  };
  
  
  
  

// üü¢ Function ‡∏î‡∏∂‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á Product ‡∏ï‡∏≤‡∏° productId
export const getAverageRating = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    const { productId } = req.params;
  
    try {
      const result = await ProductRating.aggregate([
        { $match: { productId } },                           // üü† filter ‡∏ï‡∏≤‡∏° productId
        {
          $group: {
            _id: "$productId",
            averageRating: { $avg: "$rating" },               // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            totalReviews: { $sum: 1 },                        // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          },
        },
      ]);
  
      if (result.length === 0) {
        res.status(200).json({ averageRating: 0, totalReviews: 0 });
        return;
      }
  
      const { averageRating, totalReviews } = result[0];
      res.status(200).json({ averageRating, totalReviews });
    } catch (error) {
      res.status(500).json({ message: "Error fetching rating data.", error });
    }
  };
