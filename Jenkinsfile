pipeline {
  agent any

  options {
    skipDefaultCheckout() // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ Jenkins checkout ‡πÄ‡∏≠‡∏á ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏á‡∏ó‡∏µ‡πà path ‡πÄ‡∏î‡∏¥‡∏°
  }

  parameters {
    booleanParam(name: 'USE_NO_CACHE', defaultValue: false, description: '‡πÉ‡∏ä‡πâ --no-cache ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà')
  }

  stages {
    stage('üîÑ Clean Workspace') {
      steps {
        deleteDir()
      }
    }

    stage('üì• Checkout Source Code') {
      steps {
        dir('/opt/jenkins_workspace/Benjaphan-Deploy') {
          checkout scm
        }
      }
    }

    stage('üîê Load Secrets') {
      steps {
        withCredentials([
          string(credentialsId: 'MONGODB_URI', variable: 'MONGODB_URI'),
          string(credentialsId: 'PORT', variable: 'PORT'),
          string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET'),
          string(credentialsId: 'GOOGLE_CLIENT_ID', variable: 'GOOGLE_CLIENT_ID'),
          string(credentialsId: 'GOOGLE_CLIENT_SECRET', variable: 'GOOGLE_CLIENT_SECRET'),
          string(credentialsId: 'FACEBOOK_CLIENT_ID', variable: 'FACEBOOK_CLIENT_ID'),
          string(credentialsId: 'FACEBOOK_CLIENT_SECRET', variable: 'FACEBOOK_CLIENT_SECRET')
        ]) {
          echo 'üîí Secrets loaded into environment'
        }
      }
    }

    stage('‚ôªÔ∏è Docker Down') {
      steps {
        dir('/opt/jenkins_workspace/Benjaphan-Deploy') {
          sh 'docker-compose down --remove-orphans || true'
        }
      }
    }

    stage('üê≥ Docker Build') {
      steps {
        dir('/opt/jenkins_workspace/Benjaphan-Deploy') {
          script {
            def markerFile = '/opt/jenkins_marker/.built_once'
            def useNoCache = !fileExists(markerFile) || params.USE_NO_CACHE
            def composeCmd = useNoCache ? 'docker-compose build --no-cache' : 'docker-compose build'

            echo "üß† Using no-cache: ${useNoCache}"

            if (useNoCache) {
              writeFile file: markerFile, text: "‚úÖ Built at: ${new Date()}"
            }

            withEnv([
              "MONGODB_URI=${env.MONGODB_URI}",
              "PORT=${env.PORT}",
              "JWT_SECRET=${env.JWT_SECRET}",
              "GOOGLE_CLIENT_ID=${env.GOOGLE_CLIENT_ID}",
              "GOOGLE_CLIENT_SECRET=${env.GOOGLE_CLIENT_SECRET}",
              "FACEBOOK_CLIENT_ID=${env.FACEBOOK_CLIENT_ID}",
              "FACEBOOK_CLIENT_SECRET=${env.FACEBOOK_CLIENT_SECRET}",
              "NODE_ENV=production"
            ]) {
              sh composeCmd
            }
          }
        }
      }
    }

    stage('üöÄ Docker Up') {
      steps {
        dir('/opt/jenkins_workspace/Benjaphan-Deploy') {
          withEnv([
            "MONGODB_URI=${env.MONGODB_URI}",
            "PORT=${env.PORT}",
            "JWT_SECRET=${env.JWT_SECRET}",
            "GOOGLE_CLIENT_ID=${env.GOOGLE_CLIENT_ID}",
            "GOOGLE_CLIENT_SECRET=${env.GOOGLE_CLIENT_SECRET}",
            "FACEBOOK_CLIENT_ID=${env.FACEBOOK_CLIENT_ID}",
            "FACEBOOK_CLIENT_SECRET=${env.FACEBOOK_CLIENT_SECRET}",
            "NODE_ENV=production"
          ]) {
            sh 'docker-compose up -d'
          }
        }
      }
    }

    stage('üßπ Docker Cleanup') {
      steps {
        sh '''
          docker image prune -af --filter "until=24h"
          docker builder prune -af || true
        '''
      }
    }
  }

  post {
    success {
      echo '‚úÖ Deploy ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üéâ'
    }
    failure {
      echo '‚ùå ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö log ‡∏Ñ‡∏£‡∏±‡∏ö'
    }
  }
}
